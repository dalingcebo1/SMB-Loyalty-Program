name: Configure Container App Env

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: Azure Resource Group
        required: true
        default: SMB-Loyalty-Group
      containerapp_name:
        description: Container App name
        required: true
        default: apismbloyaltyapp
      database_url:
        description: DATABASE_URL (leave blank to use secret)
        required: false
      allowed_origins:
        description: ALLOWED_ORIGINS (leave blank to use secret or default)
        required: false
      frontend_url:
        description: FRONTEND_URL (leave blank to use secret or default)
        required: false

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure env vars on Container App (no secret values printed)
        shell: bash
        env:
          RG: ${{ inputs.resource_group }}
          APP: ${{ inputs.containerapp_name }}
          IN_DATABASE_URL: ${{ inputs.database_url }}
          IN_ALLOWED_ORIGINS: ${{ inputs.allowed_origins }}
          IN_FRONTEND_URL: ${{ inputs.frontend_url }}
          SEC_DATABASE_URL: ${{ secrets.CA_DATABASE_URL }}
          SEC_JWT_SECRET: ${{ secrets.CA_JWT_SECRET }}
          SEC_RESET_SECRET: ${{ secrets.CA_RESET_SECRET }}
          SEC_SECRET_KEY: ${{ secrets.CA_SECRET_KEY }}
          SEC_ALLOWED_ORIGINS: ${{ secrets.CA_ALLOWED_ORIGINS }}
          SEC_FRONTEND_URL: ${{ secrets.CA_FRONTEND_URL }}
        run: |
          set -euo pipefail
          # Prefer inputs, else secrets, else defaults for non-sensitive values
          DATABASE_URL="${IN_DATABASE_URL:-${SEC_DATABASE_URL:-}}"
          ALLOWED_ORIGINS="${IN_ALLOWED_ORIGINS:-${SEC_ALLOWED_ORIGINS:-"https://chaosx.co.za,https://www.chaosx.co.za"}}"
          FRONTEND_URL="${IN_FRONTEND_URL:-${SEC_FRONTEND_URL:-"https://chaosx.co.za"}}"

          if [ -z "$DATABASE_URL" ]; then
            echo "DATABASE_URL not provided. Set inputs.database_url or secret CA_DATABASE_URL." >&2
            exit 1
          fi
          if [ -z "${SEC_JWT_SECRET:-}" ] || [ -z "${SEC_RESET_SECRET:-}" ] || [ -z "${SEC_SECRET_KEY:-}" ]; then
            echo "Missing one or more required secrets: CA_JWT_SECRET, CA_RESET_SECRET, CA_SECRET_KEY" >&2
            exit 1
          fi

          # Build set-env-vars argument without echoing values
          ARGS=( \
            "DATABASE_URL=$DATABASE_URL" \
            "JWT_SECRET=$SEC_JWT_SECRET" \
            "RESET_SECRET=$SEC_RESET_SECRET" \
            "SECRET_KEY=$SEC_SECRET_KEY" \
            "ALLOWED_ORIGINS=$ALLOWED_ORIGINS" \
            "FRONTEND_URL=$FRONTEND_URL" \
            "ENVIRONMENT=production" \
          )

          az containerapp update -g "$RG" -n "$APP" --set-env-vars ${ARGS[@]}

      - name: Show Container App FQDN and env keys
        shell: bash
        env:
          RG: ${{ inputs.resource_group }}
          APP: ${{ inputs.containerapp_name }}
        run: |
          fqdn=$(az containerapp show -g "$RG" -n "$APP" --query properties.configuration.ingress.fqdn -o tsv)
          echo "FQDN: https://$fqdn"
          echo "Configured env var names:"
          az containerapp show -g "$RG" -n "$APP" --query 'properties.template.containers[0].env[].name' -o tsv | tr '\t' '\n'
