name: Configure Frontend Variables

on:
  workflow_dispatch:
    inputs:
      use_env_file:
        description: "Read values from Frontend/.env (inputs override when provided)"
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      include_api_base:
        description: "Also sync VITE_API_BASE_URL from env file (defaults to false to avoid localhost leaks)"
        required: false
        default: 'false'
        type: choice
        options: ['false','true']
      env_file_path:
        description: "Custom path to .env file (default Frontend/.env)"
        required: false
        default: 'Frontend/.env'
        type: string
      vite_api_base_url:
        description: "VITE_API_BASE_URL (Backend API base URL). Optional; if omitted and use_env_file=true, it will NOT be synced unless include_api_base=true."
        required: false
        type: string
      yoco_public_key:
        description: "VITE_YOCO_PUBLIC_KEY (public key)"
        required: false
        type: string
      firebase_api_key:
        description: "VITE_FIREBASE_API_KEY"
        required: true
        type: string
      firebase_auth_domain:
        description: "VITE_FIREBASE_AUTH_DOMAIN"
        required: true
        type: string
      firebase_project_id:
        description: "VITE_FIREBASE_PROJECT_ID"
        required: true
        type: string
      firebase_storage_bucket:
        description: "VITE_FIREBASE_STORAGE_BUCKET"
        required: false
        type: string
      firebase_messaging_sender_id:
        description: "VITE_FIREBASE_MESSAGING_SENDER_ID"
        required: false
        type: string
      firebase_app_id:
        description: "VITE_FIREBASE_APP_ID"
        required: true
        type: string

jobs:
  set-vars:
    name: Set repository variables
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Checkout repository (needed if reading .env)
        uses: actions/checkout@v4
      - name: Upsert variables via GitHub API
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const useEnv = core.getInput('use_env_file') === 'true';
            const includeApiBase = core.getInput('include_api_base') === 'true';
            const fs = require('fs');
            const path = require('path');

            /** Parse .env (very simple parser for KEY=VALUE lines) */
            function parseEnv(filePath) {
              const out = {};
              const raw = fs.readFileSync(filePath, 'utf8');
              for (const line of raw.split(/\r?\n/)) {
                const trimmed = line.trim();
                if (!trimmed || trimmed.startsWith('#')) continue;
                const m = trimmed.match(/^([A-Za-z_][A-Za-z0-9_]*)\s*=\s*(.*)$/);
                if (!m) continue;
                let val = m[2];
                // strip optional quotes
                if ((val.startsWith('"') && val.endsWith('"')) || (val.startsWith('\'') && val.endsWith('\''))) {
                  val = val.slice(1, -1);
                }
                out[m[1]] = val;
              }
              return out;
            }

            let entries = {};
            if (useEnv) {
              const envPath = core.getInput('env_file_path') || 'Frontend/.env';
              const resolved = path.resolve(process.cwd(), envPath);
              if (!fs.existsSync(resolved)) {
                core.setFailed(`Env file not found: ${resolved}`);
                return;
              }
              core.info(`Reading variables from ${resolved}`);
              const parsed = parseEnv(resolved);
              // Only sync VITE_* keys
              for (const [k, v] of Object.entries(parsed)) {
                if (k.startsWith('VITE_') && v) entries[k] = v;
              }
              // Prevent unintentionally syncing localhost API base
              if (!includeApiBase && entries.hasOwnProperty('VITE_API_BASE_URL')) {
                core.info('Excluding VITE_API_BASE_URL from env file (include_api_base=false)');
                delete entries['VITE_API_BASE_URL'];
              }
            }

            // Overlay explicit inputs (if provided) to override env file values
            const overrides = {
              VITE_API_BASE_URL: core.getInput('vite_api_base_url') || undefined,
              VITE_YOCO_PUBLIC_KEY: core.getInput('yoco_public_key') || undefined,
              VITE_FIREBASE_API_KEY: core.getInput('firebase_api_key') || undefined,
              VITE_FIREBASE_AUTH_DOMAIN: core.getInput('firebase_auth_domain') || undefined,
              VITE_FIREBASE_PROJECT_ID: core.getInput('firebase_project_id') || undefined,
              VITE_FIREBASE_STORAGE_BUCKET: core.getInput('firebase_storage_bucket') || undefined,
              VITE_FIREBASE_MESSAGING_SENDER_ID: core.getInput('firebase_messaging_sender_id') || undefined,
              VITE_FIREBASE_APP_ID: core.getInput('firebase_app_id') || undefined,
            };
            for (const [k, v] of Object.entries(overrides)) {
              if (v) entries[k] = v;
            }

            if (!Object.keys(entries).length) {
              core.setFailed('No variables to set. Provide inputs or enable use_env_file.');
              return;
            }

            for (const [name, value] of Object.entries(entries)) {
              core.info(`Setting variable ${name}`);
              await github.request('PUT /repos/{owner}/{repo}/actions/variables/{name}', {
                owner,
                repo,
                name,
                value: String(value),
              });
            }
            core.info('Variables set successfully.');