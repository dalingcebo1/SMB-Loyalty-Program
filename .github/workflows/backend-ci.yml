name: Backend CI

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
    paths:
      - 'Backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'Backend/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd):$(pwd)/Backend" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Backend/requirements.txt
          pip install ruff mypy pip-audit pytest-cov

      - name: Import smoke check
        run: |
          python - <<'PY'
          import sys, import importlib as importlib
          print('[debug] Initial sys.path head:', sys.path[:5])
          for mod in ('config', 'app.core.database', 'app.models'):
              importlib.import_module(mod)
              print(f'[debug] Imported {mod} OK')
          print('[debug] Import smoke check passed.')
          PY

      - name: Run migrations
        run: |
          alembic -c Backend/alembic.ini upgrade head

      - name: Migration drift check
        run: |
          python Backend/scripts/check_migration_drift.py

      - name: Lint (ruff)
        run: ruff check Backend

      - name: Format check (ruff)
        run: ruff format --check Backend || echo "Formatting issues detected (non-blocking)."

      - name: Type check (mypy)
        run: mypy Backend --ignore-missing-imports

      - name: Security audit (pip-audit)
        env:
          PIP_AUDIT_SEVERITY: critical
        run: |
          echo "Running pip-audit (failing on vulnerabilities)."
          pip-audit -r Backend/requirements.txt || exit 1

      - name: Tests (pytest)
        run: pytest -q --maxfail=1 || pytest -q

      - name: Coverage (enforced)
        run: pytest --cov=Backend --cov-report=term-missing --cov-fail-under=78 -q
