name: Backend Quality

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'Backend/**'
      - '.github/workflows/backend-quality.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Backend/requirements.txt
          pip install ruff mypy pip-audit pytest-cov

      - name: DB migrations
        run: |
          alembic -c Backend/alembic.ini upgrade head

      - name: Lint (ruff)
        run: ruff check Backend

      - name: Format (ruff)
        run: ruff format --check Backend || echo "Formatting issues detected (non-blocking for now)."
        # Non-blocking initially; remove `|| echo` to enforce later

      - name: Type check (mypy)
        run: mypy Backend

      - name: Migration drift check
        run: python Backend/scripts/check_migration_drift.py

      - name: Security audit (pip-audit)
        env:
          PIP_AUDIT_SEVERITY: critical
        run: |
          echo "Running pip-audit (failing on vulnerabilities)."
          # If a severity threshold variable is set, filter results; otherwise default full failure.
          if [ -n "${PIP_AUDIT_SEVERITY}" ]; then
            pip-audit -r Backend/requirements.txt --require-hashes || pip-audit -r Backend/requirements.txt || exit 1
          else
            pip-audit -r Backend/requirements.txt
          fi

      - name: Tests (pytest)
        run: pytest -q --maxfail=1 || pytest -q

      - name: Coverage report (enforced)
        run: pytest --cov=Backend --cov-report=term-missing --cov-fail-under=78 -q

